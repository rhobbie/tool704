using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Tools704;
namespace MasterTape
{
    class Program
    {
        static byte[] UlongRecToByteRec(ulong[] WRecord)
        {
            byte[] tr = new byte[WRecord.Length * 6];
            int i = 0;
            foreach (long w in WRecord)
            {
                long wt = w;
                for (int j = i + 5; j >= i; j--)
                {
                    tr[j] = (byte)(wt & 0x3F);
                    wt >>= 6;
                }
                i += 6;
            }
            return tr;
        }
        static readonly string[] diagrecs = new string[192]
        {
            "00001  0 00031 0 00036",
            "00002  0 00036 0 03630",
            "00003  0 01303 0 01330",
            "00004  0 01303 0 03533",
            "00005  0 01303 0 01421",
            "00006  0 01303 0 01436",
            "00007  0 01303 0 01404",
            "00010  0 01303 0 01332",
            "00011  0 01303 0 01612",
            "00012  0 01303 0 01343",
            "00013  0 01303 0 01345",
            "00014  0 01303 0 01373",
            "00015  0 01303 0 01334",
            "00016  0 01303 0 01355",
            "00017  0 01303 0 01432",
            "00020  0 01303 0 01333",
            "00021  0 01303 0 01325",
            "00022  0 01303 0 01327",
            "00023  0 01303 0 01351",
            "00024  0 01303 0 01330",
            "00025  0 01303 0 01331",
            "00026  0 01303 0 01334",
            "00027  0 01303 0 01342",
            "00030  0 01303 0 01346",
            "00031  0 01303 0 01333",
            "00032  0 01303 0 01334",
            "00033  0 01303 0 01334",
            "00034  0 01303 0 01333",
            "00035  0 01303 0 01364",
            "00036  0 01303 0 01354",
            "00037  0 01303 0 01400",
            "00040  0 01303 0 01404",
            "00041  0 01303 0 01403",
            "00042  0 01303 0 01410",
            "00043  0 01303 0 01352",
            "00044  0 01303 0 01354",
            "00045  0 01303 0 01374",
            "00046  0 01303 0 01732",
            "00047  0 01303 0 02017",
            "00050  0 01303 0 01714",
            "00051  0 01303 0 01443",
            "00052  0 01303 0 01471",
            "00053  0 01303 0 01423",
            "00054  0 01303 0 01441",
            "00055  0 01303 0 01447",
            "00056  0 01303 0 01447",
            "00057  0 01303 0 01470",
            "00060  0 01303 0 01724",
            "00061  0 01303 0 01570",
            "00062  0 01303 0 01564",
            "00063  0 01303 0 01604",
            "00064  0 01303 0 01564",
            "00065  0 01303 0 02746",
            "00066  0 01303 0 01552",
            "00067  0 01303 0 01552",
            "00070  0 01303 0 01626",
            "00071  0 01303 0 01437",
            "00072  0 01303 0 01420",
            "00073  0 01303 0 01420",
            "00074  0 01303 0 01420",
            "00075  0 01303 0 01350",
            "00076  0 01303 0 01350",
            "00077  0 01303 0 01422",
            "00100  0 01303 0 01422",
            "00101  0 01303 0 01350",
            "00102  0 01303 0 01350",
            "00103  0 01303 0 01350",
            "00104  0 01303 0 01350",
            "00105  0 01303 0 01350",
            "00106  0 01303 0 01350",
            "00107  0 01303 0 01350",
            "00110  0 01303 0 01413",
            "00111  0 01303 0 01554",
            "00112  0 01303 0 01425",
            "00113  0 01303 0 01350",
            "00114  0 01303 0 01350",
            "00115  0 01303 0 01350",
            "00116  0 01303 0 01350",
            "00117  0 01303 0 01350",
            "00120  0 01303 0 01350",
            "00121  0 01303 0 01350",
            "00122  0 01303 0 01353",
            "00123  0 01303 0 01355",
            "00124  0 01303 0 01350",
            "00125  0 01303 0 01350",
            "00126  0 01303 0 01350",
            "00127  0 01303 0 01350",
            "00130  0 01303 0 01350",
            "00131  0 01303 0 01352",
            "00132  0 01303 0 01350",
            "00133  0 01303 0 01350",
            "00134  0 01303 0 01350",
            "00135  0 01303 0 01350",
            "00136  0 01303 0 01350",
            "00137  0 01303 0 01350",
            "00140  0 01303 0 01350",
            "00141  0 01303 0 01353",
            "00142  0 01303 0 01355",
            "00143  0 01303 0 01343",
            "00144  0 01303 0 01350",
            "00145  0 01303 0 01343",
            "00146  0 01303 0 01350",
            "00147  0 01303 0 01362",
            "00150  0 01303 0 01362",
            "00151  0 01303 0 01374",
            "00152  0 01303 0 01362",
            "00153  0 01303 0 01350",
            "00154  0 01303 0 01350",
            "00155  0 01303 0 01350",
            "00156  0 01303 0 01350",
            "00157  0 01303 0 01420",
            "00160  0 01303 0 01346",
            "00161  0 01303 0 01374",
            "00162  0 01303 0 01373",
            "00163  0 01303 0 01420",
            "00164  0 01303 0 01375",
            "00165  0 01303 0 01374",
            "00166  0 01303 0 01430",
            "00167  0 01303 0 01442",
            "00170  0 01303 0 01330",
            "00171  0 01303 0 01331",
            "00172  0 01303 0 01353",
            "00173  0 01303 0 01350",
            "00174  0 01303 0 01377",
            "00175  0 01303 0 01367",
            "00176  0 01303 0 01374",
            "00177  0 01303 0 01374",
            "00200  0 01303 0 01350",
            "00201  0 01303 0 01342",
            "00202  0 01303 0 01353",
            "00203  0 01303 0 01375",
            "00204  0 01303 0 01367",
            "00205  0 01303 0 01356",
            "00206  0 01303 0 01350",
            "00207  0 01303 0 01357",
            "00210  0 01303 0 01347",
            "00211  0 01303 0 01334",
            "00212  0 01303 0 01334",
            "00213  0 01303 0 01350",
            "00214  0 01303 0 01350",
            "00215  0 01303 0 01344",
            "00216  0 01303 0 01374",
            "00217  0 01303 0 01362",
            "00220  0 01303 0 01332",
            "00221  0 01303 0 01333",
            "00222  0 01303 0 01350",
            "00223  0 01303 0 01351",
            "00224  0 01303 0 01352",
            "00225  0 01303 0 01357",
            "00226  0 01303 0 01355",
            "00227  0 01303 0 01355",
            "00230  0 01303 0 01366",
            "00231  0 01303 0 01400",
            "00232  0 01303 0 01360",
            "00233  0 01303 0 01357",
            "00234  0 01303 0 01351",
            "00235  0 01303 0 01414",
            "00236  0 01303 0 01360",
            "00237  0 01303 0 01370",
            "00240  0 01303 0 01317",
            "00241  0 01303 0 01317",
            "00242  0 01303 0 01331",
            "00243  0 01303 0 01316",
            "00244  0 01303 0 01324",
            "00245  0 01303 0 01323",
            "00246  0 01303 0 01332",
            "00247  0 01303 0 01355",
            "00250  0 01303 0 01357",
            "00251  0 01303 0 01327",
            "00252  0 01303 0 01416",
            "00253  0 01303 0 01357",
            "00254  0 01303 0 01357",
            "00255  0 01303 0 01333",
            "00256  0 01303 0 01347",
            "00257  0 01303 0 01347",
            "00260  0 01303 0 01347",
            "00261  0 01303 0 01347",
            "00262  0 01303 0 01347",
            "00263  0 01303 0 01347",
            "00264  0 01303 0 01347",
            "00265  0 01303 0 01347",
            "00266  0 01303 0 01347",
            "00267  0 01303 0 01346",
            "00270  0 01303 0 01346",
            "00271  0 01303 0 01346",
            "00272  0 01303 0 01346",
            "00273  0 01303 0 01325",
            "00274  0 01303 0 01472",
            "00275  0 01303 0 01420",
            "00276  0 01303 0 01523",
            "00277  0 01303 0 01336",
            "00300  0 01303 0 01326"
        };
        static void Main(string[] args)
        {
            if(args.Length!=1)
            {
                Console.Error.WriteLine("Usage: MasterTape output.tap");
                return;
            }
            using (TapeWriter w = new TapeWriter(args[0], true))
            {
                w.WriteRecord(true, UlongRecToByteRec(new ulong[1])); /* dummy 1-CS*/
                w.WriteEOF();
                w.WriteEOF();
                for (int i = 1; i < 192; i++)
                {
                    string d = diagrecs[i-1];
                    int RecNr = Convert.ToInt32(d.Substring(0, 5), 8);
                    int startadr = Convert.ToInt32(d.Substring(9, 5), 8);
                    int endadr = Convert.ToInt32(d.Substring(17, 5), 8);
                    if (RecNr != i)
                        throw new Exception("wrong RecNr");
                    ulong[] data = new ulong[endadr - startadr + 1];
                    data[0] = 0x600000000UL + (ulong)i;
                    if(i==1)
                        data[1] = 0x1F2000091UL;
                    w.WriteRecord(true, UlongRecToByteRec(data)); /* dummy diag record*/
                }
                w.WriteEOF();
            }
        }
    }
}
